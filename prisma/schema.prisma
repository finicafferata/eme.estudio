// EME Estudio - Complete Prisma Schema
// This file defines the database schema for the class reservation system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  PENDING_ACTIVATION
}

enum ClassStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FULL
}

enum PackageStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  USED_UP
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  CHECKED_IN
  NO_SHOW
  COMPLETED
}

enum PaymentMethod {
  CASH_PESOS
  CASH_USD
  TRANSFER_TO_MERI_PESOS
  TRANSFER_TO_MALE_PESOS
  TRANSFER_IN_USD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RegistrationStatus {
  PENDING
  PROCESSED
  CANCELLED
  SPAM
}

enum FrameSize {
  SMALL
  MEDIUM
  LARGE
}

enum SettingType {
  STRING
  INTEGER
  DECIMAL
  BOOLEAN
  JSON
}

// ================================
// CORE TABLES
// ================================

/// Users table - Unified user management with role-based access
model User {
  id                BigInt     @id @default(autoincrement())
  uuid              String     @unique @default(uuid())
  email             String     @unique @db.VarChar(255)
  passwordHash      String     @map("password_hash") @db.VarChar(255)
  firstName         String     @map("first_name") @db.VarChar(100)
  lastName          String     @map("last_name") @db.VarChar(100)
  phone             String?    @db.VarChar(20)
  instagramHandle   String?    @map("instagram_handle") @db.VarChar(100)
  role              UserRole   @default(STUDENT)
  status            UserStatus @default(ACTIVE)
  emailVerifiedAt   DateTime?  @map("email_verified_at") @db.Timestamptz(6)
  activationToken   String?    @map("activation_token") @db.VarChar(255)
  activationTokenExpiresAt DateTime? @map("activation_token_expires_at") @db.Timestamptz(6)
  lastLoginAt       DateTime?  @map("last_login_at") @db.Timestamptz(6)
  registeredAt      DateTime   @default(now()) @map("registered_at") @db.Timestamptz(6)
  notes             String?    @db.Text
  metadata          Json       @default("{}")
  createdAt         DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  instructor        Instructor?
  packages          Package[]
  reservations      Reservation[]
  payments          Payment[]
  processedRegistrations PublicRegistration[] @relation("ProcessedBy")
  publicRegistrations   PublicRegistration[] @relation("ConvertedUser")
  auditLogs         AuditLog[]
  waitlistEntries   Waitlist[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([uuid])
  @@index([activationToken])
  @@map("users")
}

/// Extended instructor information
model Instructor {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt    @unique @map("user_id")
  specialties  String[]
  bio          String?   @db.Text
  hourlyRate   Decimal?  @map("hourly_rate") @db.Decimal(10, 2)
  isAvailable  Boolean   @default(true) @map("is_available")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes      Class[]
  classPatterns RecurringClassPattern[]

  @@map("instructors")
}

/// Class locations with detailed information
model Location {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  address   String?  @db.Text
  capacity  Int      @default(4)
  amenities String[]
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  classes   Class[]
  classPatterns RecurringClassPattern[]

  @@index([slug])
  @@index([isActive])
  @@map("locations")
}

/// Standardized class type definitions
model ClassType {
  id             BigInt    @id @default(autoincrement())
  name           String    @unique @db.VarChar(100)
  slug           String    @unique @db.VarChar(100)
  description    String?   @db.Text
  durationMinutes Int      @map("duration_minutes")
  defaultPrice   Decimal   @map("default_price") @db.Decimal(10, 2)
  maxCapacity    Int       @default(4) @map("max_capacity")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  classes        Class[]
  packages       Package[]
  classPatterns  RecurringClassPattern[]

  @@map("class_types")
}

/// Individual class instances
model Class {
  id           BigInt      @id @default(autoincrement())
  uuid         String      @unique @default(uuid())
  classTypeId  BigInt      @map("class_type_id")
  instructorId BigInt?     @map("instructor_id")
  locationId   BigInt      @map("location_id")
  startsAt     DateTime    @map("starts_at") @db.Timestamptz(6)
  endsAt       DateTime    @map("ends_at") @db.Timestamptz(6)
  capacity     Int
  smallFrameCapacity  Int @default(2) @map("small_frame_capacity")
  mediumFrameCapacity Int @default(3) @map("medium_frame_capacity")
  largeFrameCapacity  Int @default(1) @map("large_frame_capacity")
  status       ClassStatus @default(SCHEDULED)
  notes        String?     @db.Text
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  classType    ClassType   @relation(fields: [classTypeId], references: [id])
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  location     Location    @relation(fields: [locationId], references: [id])
  reservations Reservation[]
  waitlist     Waitlist[]

  @@index([startsAt])
  @@index([status])
  @@index([instructorId])
  @@index([locationId])
  @@index([classTypeId])
  @@map("classes")
}

/// Student subscription packages (formerly abonos)
model Package {
  id           BigInt        @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  userId       BigInt        @map("user_id")
  name         String        @db.VarChar(255)
  classTypeId  BigInt?       @map("class_type_id")
  totalCredits Int           @map("total_credits")
  usedCredits  Int           @default(0) @map("used_credits")
  price        Decimal       @db.Decimal(10, 2)
  purchasedAt  DateTime      @default(now()) @map("purchased_at") @db.Timestamptz(6)
  expiresAt    DateTime?     @map("expires_at") @db.Timestamptz(6)
  status       PackageStatus @default(ACTIVE)
  metadata     Json          @default("{}")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user         User          @relation(fields: [userId], references: [id])
  classType    ClassType?    @relation(fields: [classTypeId], references: [id])
  reservations Reservation[]
  payments     Payment[]

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("packages")
}

/// Class reservations with improved tracking
model Reservation {
  id                 BigInt            @id @default(autoincrement())
  uuid               String            @unique @default(uuid())
  userId             BigInt            @map("user_id")
  classId            BigInt            @map("class_id")
  packageId          BigInt?           @map("package_id")
  frameSize          FrameSize         @map("frame_size") @default(MEDIUM)
  status             ReservationStatus @default(CONFIRMED)
  reservedAt         DateTime          @default(now()) @map("reserved_at") @db.Timestamptz(6)
  checkedInAt        DateTime?         @map("checked_in_at") @db.Timestamptz(6)
  cancelledAt        DateTime?         @map("cancelled_at") @db.Timestamptz(6)
  cancellationReason String?           @map("cancellation_reason") @db.Text
  notes              String?           @db.Text
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user               User              @relation(fields: [userId], references: [id])
  class              Class             @relation(fields: [classId], references: [id])
  package            Package?          @relation(fields: [packageId], references: [id])

  @@unique([userId, classId])
  @@index([userId])
  @@index([classId])
  @@index([status])
  @@map("reservations")
}

/// Waitlist for full classes
model Waitlist {
  id        BigInt    @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  userId    BigInt    @map("user_id")
  classId   BigInt    @map("class_id")
  frameSize FrameSize @map("frame_size") @default(MEDIUM)
  priority  Int       @default(1) // 1 = highest priority
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])

  @@unique([userId, classId])
  @@index([classId])
  @@index([priority])
  @@map("waitlist")
}

/// Comprehensive payment tracking
model Payment {
  id                    BigInt        @id @default(autoincrement())
  uuid                  String        @unique @default(uuid())
  userId                BigInt        @map("user_id")
  packageId             BigInt?       @map("package_id")
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("USD") @db.Char(3)
  paymentMethod         PaymentMethod @map("payment_method")
  externalTransactionId String?       @map("external_transaction_id") @db.VarChar(255)
  status                PaymentStatus @default(PENDING)
  paidAt                DateTime?     @map("paid_at") @db.Timestamptz(6)
  refundedAt            DateTime?     @map("refunded_at") @db.Timestamptz(6)
  refundAmount          Decimal       @default(0) @map("refund_amount") @db.Decimal(10, 2)
  description           String?       @db.Text
  metadata              Json          @default("{}")
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  user                  User          @relation(fields: [userId], references: [id])
  package               Package?      @relation(fields: [packageId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([paidAt])
  @@map("payments")
}

/// Public class registrations (before user creation)
model PublicRegistration {
  id           BigInt             @id @default(autoincrement())
  uuid         String             @unique @default(uuid())
  firstName    String             @map("first_name") @db.VarChar(100)
  lastName     String             @map("last_name") @db.VarChar(100)
  email        String             @db.VarChar(255)
  phone        String?            @db.VarChar(20)
  classType    String?            @map("class_type") @db.VarChar(100)
  preferredDate DateTime?         @map("preferred_date") @db.Date
  preferredTime String?           @map("preferred_time") @db.VarChar(10)
  message      String?            @db.Text
  status       RegistrationStatus @default(PENDING)
  processedAt  DateTime?          @map("processed_at") @db.Timestamptz(6)
  processedBy  BigInt?            @map("processed_by")
  userId       BigInt?            @map("user_id") // Set when converted to user
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  processor    User?              @relation("ProcessedBy", fields: [processedBy], references: [id])
  user         User?              @relation("ConvertedUser", fields: [userId], references: [id])

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("public_registrations")
}

// ================================
// SYSTEM TABLES
// ================================

/// Templates for generating recurring classes
model RecurringClassPattern {
  id              BigInt     @id @default(autoincrement())
  name            String     @db.VarChar(255)
  classTypeId     BigInt     @map("class_type_id")
  instructorId    BigInt?    @map("instructor_id")
  locationId      BigInt     @map("location_id")
  dayOfWeek       Int        @map("day_of_week") // 0=Sunday, 6=Saturday
  startTime       DateTime   @map("start_time") @db.Time(6)
  durationMinutes Int        @map("duration_minutes")
  capacity        Int
  isActive        Boolean    @default(true) @map("is_active")
  validFrom       DateTime   @map("valid_from") @db.Date
  validUntil      DateTime?  @map("valid_until") @db.Date
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  classType       ClassType  @relation(fields: [classTypeId], references: [id])
  instructor      Instructor? @relation(fields: [instructorId], references: [id])
  location        Location   @relation(fields: [locationId], references: [id])

  @@map("recurring_class_patterns")
}

/// Holiday calendar for scheduling
model Holiday {
  id          BigInt   @id @default(autoincrement())
  name        String   @db.VarChar(255)
  date        DateTime @unique @db.Date
  isRecurring Boolean  @default(false) @map("is_recurring")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([date])
  @@map("holidays")
}

/// Application configuration
model SystemSetting {
  id          BigInt      @id @default(autoincrement())
  key         String      @unique @db.VarChar(255)
  value       String?     @db.Text
  valueType   SettingType @default(STRING) @map("value_type")
  description String?     @db.Text
  isPublic    Boolean     @default(false) @map("is_public")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("system_settings")
}

/// System audit trail
model AuditLog {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt?  @map("user_id")
  action     String   @db.VarChar(100)
  tableName  String   @map("table_name") @db.VarChar(100)
  recordId   BigInt?  @map("record_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address") @db.Inet
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relationships
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tableName])
  @@index([createdAt])
  @@map("audit_logs")
}